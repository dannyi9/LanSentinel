plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.danny'
version = '0.0.4-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.h2database:h2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.slf4j:slf4j-api:2.0.17'
    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveBaseName.set("LanSentinel")
    archiveVersion.set("")
    archiveClassifier.set("")
}

static void printfsh(String input) {
    println("<>< " + input + " <><");
}

tasks.register("dockerBuildRun") {
    group = "custom"
    description = "Builds the JAR, builds Docker image, and runs the container"

    dependsOn("bootJar")

    doLast {
        def jar = layout.buildDirectory.file("libs/LanSentinel.jar").get().asFile
        def jarPath = jar.absolutePath
        def imageName = "lansentinel"

        if (!jar.exists()) {
            printfsh "JAR not found at: $jarPath"
            printfsh "Contents of build/libs:"
            layout.buildDirectory.dir("libs").get().asFile.listFiles()?.each {
                println " - ${it.name}"
            }
            throw new GradleException("Expected JAR not found after bootJar")
        }

        printfsh "Found JAR: ${jar.name}"

        printfsh "Building Docker image..."
        exec {
            commandLine "docker", "build", "-t", imageName, "--build-arg", "JAR_NAME=${jar.name}", "."
        }

        printfsh "Running Docker container..."
        exec {
            commandLine "docker", "run", "--rm", "--net=host", "--cap-add=NET_RAW", imageName
        }
    }
}

